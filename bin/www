#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled001:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
var port = 9876;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * 把一个日期变量按照给定格式输出
 * @param format
 * @param date
 * @returns {string}
 */
function dateFormat(date, format) {
    let obj = {
        year: date.getFullYear(),
        month: (date.getMonth() + 1) < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1, //月份
        day: date.getDate() < 10 ? "0" + date.getDate() : date.getDate(),
        hour: date.getHours() < 10 ? "0" + date.getHours() : date.getHours(),
        minite: date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes(),
        second: date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds()
    };
    if (format === null || format === undefined || format === "yyyy-MM-dd HH:mm:ss") {
        return obj.year + "-" + obj.month + "-" + obj.day
            + " "
            + obj.hour + ":" + obj.minite + ":" + obj.second;
    } else if (format === "yyyy-MM-dd") {
        return obj.year + "-" + obj.month + "-" + obj.day;
    } else if (format === "yyyyMMdd") {
        return obj.year + obj.month + obj.day;
    } else {
        throw new Error("format not supported");
    }
}

Date.prototype.toJSON = function () {
    return dateFormat(this,'yyyy-MM-dd HH:mm:ss')
};
